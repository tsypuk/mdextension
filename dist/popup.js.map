{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://markdown-extension/./src/popup.ts","webpack://markdown-extension/webpack/before-startup","webpack://markdown-extension/webpack/startup","webpack://markdown-extension/webpack/after-startup"],"sourcesContent":["// Popup script\ndocument.addEventListener('DOMContentLoaded', () => {\n  const savePageButton = document.getElementById('savePage') as HTMLButtonElement;\n  const statusDiv = document.getElementById('status') as HTMLDivElement;\n  const downloadPathInput = document.getElementById('downloadPath') as HTMLInputElement;\n  const tagsInput = document.getElementById('tags') as HTMLInputElement;\n  const addFrontmatterCheckbox = document.getElementById('addFrontmatter') as HTMLInputElement;\n  \n  // Load saved settings from storage\n  chrome.storage.sync.get(['downloadPath', 'tags', 'addFrontmatter'], (result) => {\n    if (result.downloadPath) {\n      downloadPathInput.value = result.downloadPath;\n    }\n    if (result.tags) {\n      tagsInput.value = result.tags;\n    }\n    if (result.addFrontmatter !== undefined) {\n      addFrontmatterCheckbox.checked = result.addFrontmatter;\n    }\n  });\n  \n  // Save settings when they change\n  downloadPathInput.addEventListener('change', () => {\n    chrome.storage.sync.set({ downloadPath: downloadPathInput.value });\n  });\n  \n  tagsInput.addEventListener('change', () => {\n    chrome.storage.sync.set({ tags: tagsInput.value });\n  });\n  \n  addFrontmatterCheckbox.addEventListener('change', () => {\n    chrome.storage.sync.set({ addFrontmatter: addFrontmatterCheckbox.checked });\n  });\n  \n  // Save the current page as markdown with images\n  savePageButton.addEventListener('click', async () => {\n    statusDiv.textContent = 'Processing page...';\n    \n    try {\n      // Get the active tab\n      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\n      const activeTab = tabs[0];\n      \n      if (!activeTab.id) {\n        throw new Error('No active tab found');\n      }\n      \n      // Get user-defined tags\n      const tags = tagsInput.value.trim();\n      \n      // Send message to content script to get page content\n      chrome.tabs.sendMessage(\n        activeTab.id,\n        { \n          action: 'getPageContent',\n          settings: {\n            addFrontmatter: addFrontmatterCheckbox.checked,\n            tags: tags ? tags.split(',').map(tag => tag.trim()) : ['web-clipping']\n          }\n        },\n        async (response) => {\n          if (!response || !response.success) {\n            statusDiv.textContent = 'Error: Failed to get page content';\n            return;\n          }\n          \n          try {\n            // Create a sanitized title for the folder name\n            const sanitizedTitle = response.title\n              .replace(/[^a-zA-Z0-9]/g, '_')\n              .toLowerCase()\n              .substring(0, 50); // Limit length\n            \n            // Get the download path from input - use absolute path\n            const downloadPath = downloadPathInput.value.trim();\n            \n            // Create the full path for the folder - use absolute path if provided\n            const folderPath = downloadPath \n              ? `${downloadPath}/${sanitizedTitle}`\n              : sanitizedTitle;\n            \n            // Create a text file with the markdown content\n            const markdownBlob = new Blob([response.markdown], { type: 'text/markdown' });\n            const markdownUrl = URL.createObjectURL(markdownBlob);\n            \n            // Download the markdown file to the folder\n            chrome.downloads.download({\n              url: markdownUrl,\n              filename: `${folderPath}/${sanitizedTitle}.md`,\n              saveAs: false\n            }, (downloadId) => {\n              if (chrome.runtime.lastError) {\n                statusDiv.textContent = `Error: ${chrome.runtime.lastError.message}`;\n                return;\n              }\n              \n              // Download each image to the same folder\n              if (response.images && response.images.length > 0) {\n                statusDiv.textContent = `Downloading ${response.images.length} images...`;\n                \n                let completedDownloads = 0;\n                let failedDownloads = 0;\n                \n                // Create images directory first\n                chrome.downloads.download({\n                  url: URL.createObjectURL(new Blob([''])),\n                  filename: `${folderPath}/images/.placeholder`,\n                  saveAs: false\n                }, () => {\n                  // Download each image\n                  for (const image of response.images) {\n                    try {\n                      chrome.downloads.download({\n                        url: image.url,\n                        filename: `${folderPath}/images/${image.filename}`,\n                        conflictAction: 'uniquify'\n                      }, (downloadId) => {\n                        if (chrome.runtime.lastError) {\n                          console.error(`Failed to download image: ${image.url}`, chrome.runtime.lastError);\n                          failedDownloads++;\n                        } else {\n                          completedDownloads++;\n                        }\n                        \n                        if (completedDownloads + failedDownloads === response.images.length) {\n                          if (failedDownloads > 0) {\n                            statusDiv.textContent = `Page saved! ${completedDownloads} images downloaded, ${failedDownloads} failed.`;\n                          } else {\n                            statusDiv.textContent = 'Page saved as markdown with all images!';\n                          }\n                        }\n                      });\n                    } catch (error) {\n                      console.error(`Error downloading image ${image.url}:`, error);\n                      failedDownloads++;\n                      \n                      if (completedDownloads + failedDownloads === response.images.length) {\n                        statusDiv.textContent = `Page saved! ${completedDownloads} images downloaded, ${failedDownloads} failed.`;\n                      }\n                    }\n                  }\n                });\n              } else {\n                statusDiv.textContent = 'Page saved as markdown! (No images found)';\n              }\n            });\n          } catch (error) {\n            console.error('Error saving content:', error);\n            statusDiv.textContent = 'Error: Failed to save content';\n          }\n        }\n      );\n    } catch (error) {\n      console.error('Error:', error);\n      statusDiv.textContent = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  });\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/popup.ts\"]();\n",""],"names":[],"sourceRoot":""}