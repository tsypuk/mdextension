{"version":3,"file":"content.js","mappings":"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","sources":["webpack://markdown-extension/./src/content.ts"],"sourcesContent":["// Content script that runs on web pages\nconsole.log('Markdown extension content script loaded');\n\n// Interface for image information\ninterface ImageInfo {\n  url: string;\n  filename: string;\n  element: HTMLImageElement;\n  id: string; // Unique ID to replace in the markdown\n}\n\n// Interface for settings\ninterface Settings {\n  addFrontmatter: boolean;\n  tags: string[];\n}\n\n// Function to generate Obsidian-like frontmatter\nfunction generateFrontmatter(title: string, settings: Settings): string {\n  const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n  const description = document.querySelector('meta[name=\"description\"]')?.getAttribute('content') || \n                     document.querySelector('meta[property=\"og:description\"]')?.getAttribute('content') || \n                     'Page saved from ' + document.URL;\n  \n  // Format tags as YAML array\n  const tagsStr = settings.tags.map(tag => `  - ${tag}`).join('\\n');\n  \n  return `---\ntitle: ${title}\ndescription: ${description}\ntags:\n${tagsStr}\npublished: true\ndate: ${date}\n---\n\n`;\n}\n\n// Function to convert HTML to Markdown with images in their original positions\nfunction htmlToMarkdown(element: HTMLElement, images: ImageInfo[], settings: Settings): string {\n  let markdown = '';\n  \n  // Add frontmatter if enabled\n  if (settings.addFrontmatter) {\n    markdown += generateFrontmatter(document.title, settings);\n  } else {\n    // Just add the title as a heading\n    markdown += `# ${document.title}\\n\\n`;\n  }\n  \n  // Add source URL\n  markdown += `Source: [${document.URL}](${document.URL})\\n\\n`;\n  \n  // Create a map of image elements to their markdown representation\n  const imageMap = new Map<string, string>();\n  images.forEach(img => {\n    const altText = img.element.alt || 'image';\n    imageMap.set(img.element.src, `![${altText}](images/${img.filename})`);\n  });\n  \n  // Process the main content\n  // We'll use a more direct approach to capture the visible content\n  \n  // Process all visible text nodes and images in order\n  function processNode(node: Node, depth = 0): string {\n    if (!node) return '';\n    \n    let result = '';\n    \n    // Check node type\n    switch (node.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = node as HTMLElement;\n        \n        // Skip hidden elements\n        if (element.offsetParent === null && element.tagName !== 'BODY') {\n          return '';\n        }\n        \n        // Handle specific element types\n        switch (element.tagName.toLowerCase()) {\n          case 'h1':\n          case 'h2':\n          case 'h3':\n          case 'h4':\n          case 'h5':\n          case 'h6':\n            const level = parseInt(element.tagName.substring(1));\n            const hashes = '#'.repeat(level);\n            result += `${hashes} ${element.textContent?.trim()}\\n\\n`;\n            break;\n            \n          case 'p':\n            // Process paragraph content\n            let paragraphContent = '';\n            for (let i = 0; i < element.childNodes.length; i++) {\n              paragraphContent += processNode(element.childNodes[i], depth + 1);\n            }\n            result += `${paragraphContent.trim()}\\n\\n`;\n            break;\n            \n          case 'img':\n            // Handle image element\n            const imgElement = element as HTMLImageElement;\n            if (imgElement.src && imageMap.has(imgElement.src)) {\n              result += imageMap.get(imgElement.src) + '\\n\\n';\n            }\n            break;\n            \n          case 'a':\n            // Handle links\n            const link = element as HTMLAnchorElement;\n            const href = link.href;\n            const text = link.textContent?.trim() || href;\n            result += `[${text}](${href})`;\n            break;\n            \n          case 'ul':\n          case 'ol':\n            // Handle lists\n            const isOrdered = element.tagName.toLowerCase() === 'ol';\n            const items = element.querySelectorAll('li');\n            items.forEach((item, index) => {\n              const prefix = isOrdered ? `${index + 1}. ` : '- ';\n              let itemContent = '';\n              for (let i = 0; i < item.childNodes.length; i++) {\n                itemContent += processNode(item.childNodes[i], depth + 1);\n              }\n              result += `${prefix}${itemContent.trim()}\\n`;\n            });\n            result += '\\n';\n            break;\n            \n          case 'br':\n            result += '\\n';\n            break;\n            \n          case 'strong':\n          case 'b':\n            let boldContent = '';\n            for (let i = 0; i < element.childNodes.length; i++) {\n              boldContent += processNode(element.childNodes[i], depth + 1);\n            }\n            result += `**${boldContent}**`;\n            break;\n            \n          case 'em':\n          case 'i':\n            let italicContent = '';\n            for (let i = 0; i < element.childNodes.length; i++) {\n              italicContent += processNode(element.childNodes[i], depth + 1);\n            }\n            result += `*${italicContent}*`;\n            break;\n            \n          case 'code':\n            result += `\\`${element.textContent?.trim()}\\``;\n            break;\n            \n          case 'pre':\n            result += `\\`\\`\\`\\n${element.textContent?.trim()}\\n\\`\\`\\`\\n\\n`;\n            break;\n            \n          case 'blockquote':\n            let quoteContent = '';\n            for (let i = 0; i < element.childNodes.length; i++) {\n              quoteContent += processNode(element.childNodes[i], depth + 1);\n            }\n            // Add '> ' to each line\n            result += quoteContent.split('\\n').map(line => `> ${line}`).join('\\n') + '\\n\\n';\n            break;\n            \n          case 'div':\n          case 'section':\n          case 'article':\n          case 'main':\n          case 'span':\n            // Generic container elements - process their children\n            for (let i = 0; i < element.childNodes.length; i++) {\n              result += processNode(element.childNodes[i], depth + 1);\n            }\n            break;\n            \n          case 'table':\n            // Handle tables\n            const rows = element.querySelectorAll('tr');\n            if (rows.length > 0) {\n              // Process header row\n              const headerRow = rows[0];\n              const headers = headerRow.querySelectorAll('th');\n              if (headers.length > 0) {\n                // Table with headers\n                result += '| ' + Array.from(headers).map(th => th.textContent?.trim() || '').join(' | ') + ' |\\n';\n                result += '| ' + Array.from(headers).map(() => '---').join(' | ') + ' |\\n';\n                \n                // Process data rows\n                for (let i = 1; i < rows.length; i++) {\n                  const cells = rows[i].querySelectorAll('td');\n                  result += '| ' + Array.from(cells).map(td => td.textContent?.trim() || '').join(' | ') + ' |\\n';\n                }\n              } else {\n                // Table without headers, use first row as header\n                const cells = rows[0].querySelectorAll('td');\n                result += '| ' + Array.from(cells).map(td => td.textContent?.trim() || '').join(' | ') + ' |\\n';\n                result += '| ' + Array.from(cells).map(() => '---').join(' | ') + ' |\\n';\n                \n                // Process remaining rows\n                for (let i = 1; i < rows.length; i++) {\n                  const cells = rows[i].querySelectorAll('td');\n                  result += '| ' + Array.from(cells).map(td => td.textContent?.trim() || '').join(' | ') + ' |\\n';\n                }\n              }\n              result += '\\n';\n            }\n            break;\n            \n          default:\n            // For other elements, just process their children\n            for (let i = 0; i < element.childNodes.length; i++) {\n              result += processNode(element.childNodes[i], depth + 1);\n            }\n        }\n        break;\n        \n      case Node.TEXT_NODE:\n        // Only include non-empty text nodes\n        const text = node.textContent?.trim();\n        if (text) {\n          result += text + ' ';\n        }\n        break;\n    }\n    \n    return result;\n  }\n  \n  // Start processing from the body\n  const mainContent = processNode(document.body);\n  markdown += mainContent;\n  \n  // Check if any images were not included in the markdown\n  const usedImages = new Set<string>();\n  images.forEach(img => {\n    if (markdown.includes(`images/${img.filename}`)) {\n      usedImages.add(img.url);\n    }\n  });\n  \n  // Add any unused images at the end\n  const unusedImages = images.filter(img => !usedImages.has(img.url));\n  if (unusedImages.length > 0) {\n    markdown += '\\n## Additional Images\\n\\n';\n    unusedImages.forEach(img => {\n      const altText = img.element.alt || 'image';\n      markdown += `![${altText}](images/${img.filename})\\n\\n`;\n    });\n  }\n  \n  return markdown;\n}\n\n// Function to collect all images from the page\nfunction collectImages(): ImageInfo[] {\n  const images: ImageInfo[] = [];\n  const imgElements = document.querySelectorAll('img');\n  const processedUrls = new Set<string>(); // To avoid duplicates\n  \n  imgElements.forEach((img, index) => {\n    const src = img.src;\n    if (src && src.trim() !== '' && !processedUrls.has(src)) {\n      try {\n        // Skip data URLs (they're often tiny icons or tracking pixels)\n        if (src.startsWith('data:')) {\n          return;\n        }\n        \n        // Skip very small images (likely icons, spacers, etc.) unless they have alt text\n        if (img.width < 20 && img.height < 20 && !img.alt) {\n          return;\n        }\n        \n        // Create a filename from the image URL\n        let filename = src.split('/').pop() || `image_${index}.jpg`;\n        // Clean up the filename\n        filename = filename.split('?')[0]; // Remove query parameters\n        if (!filename.includes('.')) {\n          filename += '.jpg'; // Add extension if missing\n        }\n        \n        // Make sure filename is valid\n        filename = filename.replace(/[^a-zA-Z0-9._-]/g, '_');\n        \n        images.push({\n          url: src,\n          filename: filename,\n          element: img,\n          id: `img_${index}`\n        });\n        \n        processedUrls.add(src); // Mark this URL as processed\n      } catch (e) {\n        console.error('Error processing image:', e);\n      }\n    }\n  });\n  \n  // Also look for background images in CSS\n  const elementsWithBackground = document.querySelectorAll('[style*=\"background-image\"]');\n  elementsWithBackground.forEach((element, index) => {\n    const style = window.getComputedStyle(element);\n    const backgroundImage = style.backgroundImage;\n    \n    if (backgroundImage && backgroundImage !== 'none') {\n      try {\n        // Extract URL from the background-image style\n        const urlMatch = /url\\(['\"]?([^'\"()]+)['\"]?\\)/i.exec(backgroundImage);\n        if (urlMatch && urlMatch[1]) {\n          const src = urlMatch[1];\n          \n          if (!processedUrls.has(src)) {\n            // Skip data URLs\n            if (src.startsWith('data:')) {\n              return;\n            }\n            \n            // Create a filename\n            let filename = src.split('/').pop() || `bg_image_${index}.jpg`;\n            filename = filename.split('?')[0];\n            if (!filename.includes('.')) {\n              filename += '.jpg';\n            }\n            \n            filename = filename.replace(/[^a-zA-Z0-9._-]/g, '_');\n            \n            // Create a virtual image element\n            const imgElement = document.createElement('img');\n            imgElement.src = src;\n            imgElement.alt = 'Background Image';\n            \n            images.push({\n              url: src,\n              filename: filename,\n              element: imgElement,\n              id: `bg_img_${index}`\n            });\n            \n            processedUrls.add(src);\n          }\n        }\n      } catch (e) {\n        console.error('Error processing background image:', e);\n      }\n    }\n  });\n  \n  return images;\n}\n\n// Function to get page content as markdown with image references\nfunction getPageAsMarkdown(settings: Settings): { markdown: string, images: { url: string, filename: string }[] } {\n  // Collect all images\n  const images = collectImages();\n  \n  // Convert HTML to markdown with images in their original positions\n  const markdown = htmlToMarkdown(document.body, images, settings);\n  \n  return {\n    markdown,\n    images: images.map(img => ({ url: img.url, filename: img.filename }))\n  };\n}\n\n// Listen for messages from the popup or background script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  console.log('Message received in content script:', message);\n  \n  if (message.action === 'getPageContent') {\n    // Default settings if not provided\n    const settings: Settings = message.settings || {\n      addFrontmatter: true,\n      tags: ['web-clipping']\n    };\n    \n    const pageContent = getPageAsMarkdown(settings);\n    sendResponse({\n      success: true,\n      markdown: pageContent.markdown,\n      images: pageContent.images,\n      title: document.title\n    });\n  }\n  \n  // Return true to indicate you wish to send a response asynchronously\n  return true;\n});\n"],"names":[],"sourceRoot":""}